import unittest
import sys
import math
import cmath
import numpy
import operator
import collections

from testing_tools import *

TOL = 1E-13
DIGITS = 13

from GTC import *
from GTC import cholesky as chol 

#-----------------------------------------------------
class TestCholeskyFloat(unittest.TestCase):
    """
    Compare the decomposition of a real matrix with numpy and R
    
    """
    #------------------------------------------------------------------------
    def test(self):
        
        data = (
            (1.23, 0.57,0.22),
            (0.57,1.23, 0.57),
            (0.22,0.57, 5.77)
        )
        na = numpy.array( data )
        a = numpy.array( data )

        Ln = numpy.linalg.cholesky(na)
        L = chol.cholesky_decomp(a)

        for i,j in zip( Ln.flat, L.flat):
            self.assertTrue( equivalent(i,j) )

        # Make sure there were no side effects on `a`
        d = numpy.array( data )
        for i,j in zip( d.flat, a.flat):
            self.assertTrue( equivalent(i,j) )

        # Check that we recover the original matrix 
        A = numpy.matmul(L,L.T) 
        for i,j in zip( A.flat, a.flat):
            self.assertTrue( equivalent(i,j) )

    #------------------------------------------------------------------------
    def test2(self):
        # Same matrix as above but in R 
        data = (
            (1.23, 0.57,0.22),
            (0.57,1.23, 0.57),
            (0.22,0.57, 5.77)
        )

        a = numpy.array( data )

        # Result obtained from R
        k_R = numpy.array( 
            """
                1.1090537 0.0000000 0.000000
                0.5139517 0.9827785 0.000000
                0.1983673 0.4762505 2.346026
            """.strip().split(),
            dtype=float
        )
        k_R.shape = 3,3 
        
        L = chol.cholesky_decomp(a)

        for i,j in zip( k_R.flat, L.flat):
            self.assertTrue( equivalent(i,j,tol=1E-6) )
  
    #------------------------------------------------------------------------
    def test3(self):

        V = numpy.array( 
            """
                0    1    2    3    4    5    6    7    8     9    10    11    12    13    14    15
                1    0    1    2    3    4    5    6    7     8     9    10    11    12    13    14
                2    1    0    1    2    3    4    5    6     7     8     9    10    11    12    13
                3    2    1    0    1    2    3    4    5     6     7     8     9    10    11    12
                4    3    2    1    0    1    2    3    4     5     6     7     8     9    10    11
                5    4    3    2    1    0    1    2    3     4     5     6     7     8     9    10
                6    5    4    3    2    1    0    1    2     3     4     5     6     7     8     9
                7    6    5    4    3    2    1    0    1     2     3     4     5     6     7     8
                8    7    6    5    4    3    2    1    0     1     2     3     4     5     6     7
                9    8    7    6    5    4    3    2    1     0     1     2     3     4     5     6
                10    9    8    7    6    5    4    3    2     1     0     1     2     3     4     5
                11   10    9    8    7    6    5    4    3     2     1     0     1     2     3     4
                12   11   10    9    8    7    6    5    4     3     2     1     0     1     2     3
                13   12   11   10    9    8    7    6    5     4     3     2     1     0     1     2
                14   13   12   11   10    9    8    7    6     5     4     3     2     1     0     1
                15   14   13   12   11   10    9    8    7     6     5     4     3     2     1     0
            """.strip().split(),
            dtype=float
        )
        V.shape = 16,16 
        
        rho = 0.3104092
        for i in range(16):
            for j in range(16):
                V[i,j] = rho**V[i,j]
 
        # Check that V in R is the same, in R:
        # str <- "0    1    2    3 (etc)"
        # (NB, must have only one space and no eol between numbers)
        # vec <- as.numeric(as.numeric(strsplit(str, " ")[[1]]))
        # ix <- matrix(vec, nrow = 16)
        # A <- 0.3104092^ix
        # L <- chol(A)

        V_R = numpy.array(
            """
            1.000000e+00 3.104092e-01 9.635387e-02 2.990913e-02 9.284069e-03 2.881860e-03 8.945559e-04 2.776784e-04 8.619393e-05 2.675539e-05 8.305119e-06 2.577985e-06 8.002303e-07 2.483989e-07 7.710529e-08 2.393419e-08
            3.104092e-01 1.000000e+00 3.104092e-01 9.635387e-02 2.990913e-02 9.284069e-03 2.881860e-03 8.945559e-04 2.776784e-04 8.619393e-05 2.675539e-05 8.305119e-06 2.577985e-06 8.002303e-07 2.483989e-07 7.710529e-08
            9.635387e-02 3.104092e-01 1.000000e+00 3.104092e-01 9.635387e-02 2.990913e-02 9.284069e-03 2.881860e-03 8.945559e-04 2.776784e-04 8.619393e-05 2.675539e-05 8.305119e-06 2.577985e-06 8.002303e-07 2.483989e-07
            2.990913e-02 9.635387e-02 3.104092e-01 1.000000e+00 3.104092e-01 9.635387e-02 2.990913e-02 9.284069e-03 2.881860e-03 8.945559e-04 2.776784e-04 8.619393e-05 2.675539e-05 8.305119e-06 2.577985e-06 8.002303e-07
            9.284069e-03 2.990913e-02 9.635387e-02 3.104092e-01 1.000000e+00 3.104092e-01 9.635387e-02 2.990913e-02 9.284069e-03 2.881860e-03 8.945559e-04 2.776784e-04 8.619393e-05 2.675539e-05 8.305119e-06 2.577985e-06
            2.881860e-03 9.284069e-03 2.990913e-02 9.635387e-02 3.104092e-01 1.000000e+00 3.104092e-01 9.635387e-02 2.990913e-02 9.284069e-03 2.881860e-03 8.945559e-04 2.776784e-04 8.619393e-05 2.675539e-05 8.305119e-06
            8.945559e-04 2.881860e-03 9.284069e-03 2.990913e-02 9.635387e-02 3.104092e-01 1.000000e+00 3.104092e-01 9.635387e-02 2.990913e-02 9.284069e-03 2.881860e-03 8.945559e-04 2.776784e-04 8.619393e-05 2.675539e-05
            2.776784e-04 8.945559e-04 2.881860e-03 9.284069e-03 2.990913e-02 9.635387e-02 3.104092e-01 1.000000e+00 3.104092e-01 9.635387e-02 2.990913e-02 9.284069e-03 2.881860e-03 8.945559e-04 2.776784e-04 8.619393e-05
            8.619393e-05 2.776784e-04 8.945559e-04 2.881860e-03 9.284069e-03 2.990913e-02 9.635387e-02 3.104092e-01 1.000000e+00 3.104092e-01 9.635387e-02 2.990913e-02 9.284069e-03 2.881860e-03 8.945559e-04 2.776784e-04
            2.675539e-05 8.619393e-05 2.776784e-04 8.945559e-04 2.881860e-03 9.284069e-03 2.990913e-02 9.635387e-02 3.104092e-01 1.000000e+00 3.104092e-01 9.635387e-02 2.990913e-02 9.284069e-03 2.881860e-03 8.945559e-04
            8.305119e-06 2.675539e-05 8.619393e-05 2.776784e-04 8.945559e-04 2.881860e-03 9.284069e-03 2.990913e-02 9.635387e-02 3.104092e-01 1.000000e+00 3.104092e-01 9.635387e-02 2.990913e-02 9.284069e-03 2.881860e-03
            2.577985e-06 8.305119e-06 2.675539e-05 8.619393e-05 2.776784e-04 8.945559e-04 2.881860e-03 9.284069e-03 2.990913e-02 9.635387e-02 3.104092e-01 1.000000e+00 3.104092e-01 9.635387e-02 2.990913e-02 9.284069e-03
            8.002303e-07 2.577985e-06 8.305119e-06 2.675539e-05 8.619393e-05 2.776784e-04 8.945559e-04 2.881860e-03 9.284069e-03 2.990913e-02 9.635387e-02 3.104092e-01 1.000000e+00 3.104092e-01 9.635387e-02 2.990913e-02
            2.483989e-07 8.002303e-07 2.577985e-06 8.305119e-06 2.675539e-05 8.619393e-05 2.776784e-04 8.945559e-04 2.881860e-03 9.284069e-03 2.990913e-02 9.635387e-02 3.104092e-01 1.000000e+00 3.104092e-01 9.635387e-02
            7.710529e-08 2.483989e-07 8.002303e-07 2.577985e-06 8.305119e-06 2.675539e-05 8.619393e-05 2.776784e-04 8.945559e-04 2.881860e-03 9.284069e-03 2.990913e-02 9.635387e-02 3.104092e-01 1.000000e+00 3.104092e-01
            2.393419e-08 7.710529e-08 2.483989e-07 8.002303e-07 2.577985e-06 8.305119e-06 2.675539e-05 8.619393e-05 2.776784e-04 8.945559e-04 2.881860e-03 9.284069e-03 2.990913e-02 9.635387e-02 3.104092e-01 1.000000e+00
            """.strip().split(),
            dtype=float
        )
        V_R.shape = 16,16 
        
        for i in range(16):
            for j in range(16):
                self.assertTrue( equivalent(V[i,j],V_R[i,j],tol=1E-8) )
                
        L = chol.cholesky_decomp(V)

        # Check that we recover the original matrix 
        A = numpy.matmul(L,L.T) 
        for i,j in zip( A.flat, V.flat):
            self.assertTrue( equivalent(i,j) )

        # Result obtained from R
        # L <- chol(A)
        l_R = numpy.array( 
            """
                1 0.3104092 0.09635387 0.02990913 0.009284069 0.002881860 0.0008945559 0.0002776784 8.619393e-05 2.675539e-05 8.305119e-06 2.577985e-06 8.002303e-07 2.483989e-07 7.710529e-08 2.393419e-08
                0 0.9506030 0.29507593 0.09159428 0.028431708 0.008825464 0.0027395051 0.0008503676 2.639619e-04 8.193621e-05 2.543375e-05 7.894871e-06 2.450641e-06 7.607014e-07 2.361287e-07 7.329652e-08
                0 0.0000000 0.95060303 0.29507593 0.091594283 0.028431708 0.0088254637 0.0027395051 8.503676e-04 2.639619e-04 8.193621e-05 2.543375e-05 7.894871e-06 2.450641e-06 7.607014e-07 2.361287e-07
                0 0.0000000 0.00000000 0.95060303 0.295075927 0.091594283 0.0284317080 0.0088254637 2.739505e-03 8.503676e-04 2.639619e-04 8.193621e-05 2.543375e-05 7.894871e-06 2.450641e-06 7.607014e-07
                0 0.0000000 0.00000000 0.00000000 0.950603034 0.295075927 0.0915942825 0.0284317080 8.825464e-03 2.739505e-03 8.503676e-04 2.639619e-04 8.193621e-05 2.543375e-05 7.894871e-06 2.450641e-06
                0 0.0000000 0.00000000 0.00000000 0.000000000 0.950603034 0.2950759274 0.0915942825 2.843171e-02 8.825464e-03 2.739505e-03 8.503676e-04 2.639619e-04 8.193621e-05 2.543375e-05 7.894871e-06
                0 0.0000000 0.00000000 0.00000000 0.000000000 0.000000000 0.9506030342 0.2950759274 9.159428e-02 2.843171e-02 8.825464e-03 2.739505e-03 8.503676e-04 2.639619e-04 8.193621e-05 2.543375e-05
                0 0.0000000 0.00000000 0.00000000 0.000000000 0.000000000 0.0000000000 0.9506030342 2.950759e-01 9.159428e-02 2.843171e-02 8.825464e-03 2.739505e-03 8.503676e-04 2.639619e-04 8.193621e-05
                0 0.0000000 0.00000000 0.00000000 0.000000000 0.000000000 0.0000000000 0.0000000000 9.506030e-01 2.950759e-01 9.159428e-02 2.843171e-02 8.825464e-03 2.739505e-03 8.503676e-04 2.639619e-04
                0 0.0000000 0.00000000 0.00000000 0.000000000 0.000000000 0.0000000000 0.0000000000 0.000000e+00 9.506030e-01 2.950759e-01 9.159428e-02 2.843171e-02 8.825464e-03 2.739505e-03 8.503676e-04
                0 0.0000000 0.00000000 0.00000000 0.000000000 0.000000000 0.0000000000 0.0000000000 0.000000e+00 0.000000e+00 9.506030e-01 2.950759e-01 9.159428e-02 2.843171e-02 8.825464e-03 2.739505e-03
                0 0.0000000 0.00000000 0.00000000 0.000000000 0.000000000 0.0000000000 0.0000000000 0.000000e+00 0.000000e+00 0.000000e+00 9.506030e-01 2.950759e-01 9.159428e-02 2.843171e-02 8.825464e-03
                0 0.0000000 0.00000000 0.00000000 0.000000000 0.000000000 0.0000000000 0.0000000000 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 9.506030e-01 2.950759e-01 9.159428e-02 2.843171e-02
                0 0.0000000 0.00000000 0.00000000 0.000000000 0.000000000 0.0000000000 0.0000000000 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 9.506030e-01 2.950759e-01 9.159428e-02
                0 0.0000000 0.00000000 0.00000000 0.000000000 0.000000000 0.0000000000 0.0000000000 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 9.506030e-01 2.950759e-01
                0 0.0000000 0.00000000 0.00000000 0.000000000 0.000000000 0.0000000000 0.0000000000 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 9.506030e-01
            """.strip().split(),
            dtype=float 
        )
        l_R.shape = 16,16 

        # Check that we recover the original matrix 
        # M = t(L) 
        # A_new <- M %*% L
        # NB, all.equal(A, A_new) in R was not entirely happy: "Mean relative difference: 1.002133"
        A = numpy.matmul(l_R.T,l_R) 
        for i,j in zip( A.flat, V_R.flat):
            self.assertTrue( equivalent(i,j,tol=1E-6) )

        for i,j in zip( l_R.flat, L.T.flat):
            self.assertTrue( equivalent(i,j,tol=1E-6) )
                        
    #------------------------------------------------------------------------
    def test4(self):

        V = numpy.array( 
            """
                1.000000000 0.310409200 0.09635387 0.02990913 0.009284069 0.002881860
                0.310409200 1.000000000 0.31040920 0.09635387 0.029909128 0.009284069
                0.096353871 0.310409200 1.00000000 0.31040920 0.096353871 0.029909128
                0.029909128 0.096353871 0.31040920 1.00000000 0.310409200 0.096353871
                0.009284069 0.029909128 0.09635387 0.31040920 1.000000000 0.310409200
                0.002881860 0.009284069 0.02990913 0.09635387 0.310409200 1.000000000
            """.strip().split(),
            dtype=float
        )
        V.shape = 6,6 
        
        L = chol.cholesky_decomp(V)

        # Check that we recover the original matrix 
        A = numpy.matmul(L,L.T) 
        for i,j in zip( A.flat, V.flat):
            self.assertTrue( equivalent(i,j,tol=1E-8) )

        # Result obtained from R
        l_R = numpy.array( 
            """
                1.000000000 0.000000000 0.00000000 0.00000000 0.0000000 0.000000
                0.310409200 0.950603034 0.00000000 0.00000000 0.0000000 0.000000
                0.096353871 0.295075927 0.95060303 0.00000000 0.0000000 0.000000
                0.029909128 0.091594283 0.29507593 0.95060303 0.0000000 0.000000
                0.009284069 0.028431708 0.09159428 0.29507593 0.9506030 0.000000
                0.002881860 0.008825464 0.02843171 0.09159428 0.2950759 0.950603
            """.strip().split(),
            dtype=float 
        )
        l_R.shape = 6,6 

        # Check that we recover the original matrix 
        A = numpy.matmul(l_R,l_R.T) 
        for i,j in zip( A.flat, V.flat):
            self.assertTrue( equivalent(i,j,tol=1E-7) )

        for i,j in zip( l_R.flat, L.flat):
            self.assertTrue( equivalent(i,j,tol=1E-7) )

        # Now the inverse
        L_inv = chol.cholesky_inv(L)
 
        # Result obtained from R
        l_inv_R = numpy.array( 
            """
                1.000000e+00  0.000000e+00  0.000000e+00  0.0000000  0.0000000 0.000000
                -3.265392e-01  1.051964e+00  0.000000e+00  0.0000000  0.0000000 0.000000
                1.459893e-17 -3.265392e-01  1.051964e+00  0.0000000  0.0000000 0.000000
                6.417556e-18  0.000000e+00 -3.265392e-01  1.0519638  0.0000000 0.000000
                -1.573865e-18  7.299465e-18  0.000000e+00 -0.3265392  1.0519638 0.000000
                -1.102387e-19 -4.409549e-19  7.299465e-18  0.0000000 -0.3265392 1.051964                
            """.strip().split(),
            dtype=float 
        )
        l_inv_R.shape = 6,6 
 
        for i,j in zip( l_inv_R.flat, L_inv.flat):
            self.assertTrue( equivalent(i,j,tol=1E-6) )

    #------------------------------------------------------------------------
    def test5(self):

        V = numpy.array( 
            """
                1.000000e+00 3.104092e-01 0.0963538714 0.0299091282 0.009284069 0.002881860 0.0008945559 0.0002776784 8.619393e-05 2.675539e-05
                3.104092e-01 1.000000e+00 0.3104092000 0.0963538714 0.029909128 0.009284069 0.0028818603 0.0008945559 2.776784e-04 8.619393e-05
                9.635387e-02 3.104092e-01 1.0000000000 0.3104092000 0.096353871 0.029909128 0.0092840685 0.0028818603 8.945559e-04 2.776784e-04
                2.990913e-02 9.635387e-02 0.3104092000 1.0000000000 0.310409200 0.096353871 0.0299091282 0.0092840685 2.881860e-03 8.945559e-04
                9.284069e-03 2.990913e-02 0.0963538714 0.3104092000 1.000000000 0.310409200 0.0963538714 0.0299091282 9.284069e-03 2.881860e-03
                2.881860e-03 9.284069e-03 0.0299091282 0.0963538714 0.310409200 1.000000000 0.3104092000 0.0963538714 2.990913e-02 9.284069e-03
                8.945559e-04 2.881860e-03 0.0092840685 0.0299091282 0.096353871 0.310409200 1.0000000000 0.3104092000 9.635387e-02 2.990913e-02
                2.776784e-04 8.945559e-04 0.0028818603 0.0092840685 0.029909128 0.096353871 0.3104092000 1.0000000000 3.104092e-01 9.635387e-02
                8.619393e-05 2.776784e-04 0.0008945559 0.0028818603 0.009284069 0.029909128 0.0963538714 0.3104092000 1.000000e+00 3.104092e-01
                2.675539e-05 8.619393e-05 0.0002776784 0.0008945559 0.002881860 0.009284069 0.0299091282 0.0963538714 3.104092e-01 1.000000e+00
            """.strip().split(),
            dtype=float
        )
        V.shape = 10,10 
        
        L = chol.cholesky_decomp(V)

        # Check that we recover the original matrix 
        A = numpy.matmul(L,L.T) 
        for i,j in zip( A.flat, V.flat):
            self.assertTrue( equivalent(i,j,tol=1E-8) )

        # Result obtained from R
        l_R = numpy.array( 
            """
                1.000000e+00 0.000000e+00 0.0000000000 0.0000000000 0.000000000 0.000000000 0.00000000 0.00000000 0.0000000 0.000000
                3.104092e-01 9.506030e-01 0.0000000000 0.0000000000 0.000000000 0.000000000 0.00000000 0.00000000 0.0000000 0.000000
                9.635387e-02 2.950759e-01 0.9506030342 0.0000000000 0.000000000 0.000000000 0.00000000 0.00000000 0.0000000 0.000000
                2.990913e-02 9.159428e-02 0.2950759274 0.9506030342 0.000000000 0.000000000 0.00000000 0.00000000 0.0000000 0.000000
                9.284069e-03 2.843171e-02 0.0915942825 0.2950759274 0.950603034 0.000000000 0.00000000 0.00000000 0.0000000 0.000000
                2.881860e-03 8.825464e-03 0.0284317080 0.0915942825 0.295075927 0.950603034 0.00000000 0.00000000 0.0000000 0.000000
                8.945559e-04 2.739505e-03 0.0088254637 0.0284317080 0.091594283 0.295075927 0.95060303 0.00000000 0.0000000 0.000000
                2.776784e-04 8.503676e-04 0.0027395051 0.0088254637 0.028431708 0.091594283 0.29507593 0.95060303 0.0000000 0.000000
                8.619393e-05 2.639619e-04 0.0008503676 0.0027395051 0.008825464 0.028431708 0.09159428 0.29507593 0.9506030 0.000000
                2.675539e-05 8.193621e-05 0.0002639619 0.0008503676 0.002739505 0.008825464 0.02843171 0.09159428 0.2950759 0.950603                
            """.strip().split(),
            dtype=float 
        )
        l_R.shape = 10,10

        # Check that we recover the original matrix 
        A = numpy.matmul(l_R,l_R.T) 
        for i,j in zip( A.flat, V.flat):
            self.assertTrue( equivalent(i,j,tol=1E-7) )

        for i,j in zip( l_R.flat, L.flat):
            self.assertTrue( equivalent(i,j,tol=1E-7) )

        # Now the inverse
        L_inv = chol.cholesky_inv(L)
 
        # Result obtained from R
        l_inv_R = numpy.array( 
            """
                1.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.0000000  0.0000000 0.000000
                -3.265392e-01  1.051964e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.0000000  0.0000000 0.000000
                1.459893e-17 -3.265392e-01  1.051964e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.0000000  0.0000000 0.000000
                6.417556e-18  0.000000e+00 -3.265392e-01  1.051964e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.0000000  0.0000000 0.000000
                -1.573865e-18  7.299465e-18  0.000000e+00 -3.265392e-01  1.051964e+00  0.000000e+00  0.000000e+00  0.0000000  0.0000000 0.000000
                -1.102387e-19 -4.409549e-19  7.299465e-18  0.000000e+00 -3.265392e-01  1.051964e+00  0.000000e+00  0.0000000  0.0000000 0.000000
                3.146028e-19 -1.022672e-18 -4.409549e-19  7.299465e-18  0.000000e+00 -3.265392e-01  1.051964e+00  0.0000000  0.0000000 0.000000
                -2.755968e-20  4.837763e-19 -1.022672e-18 -4.409549e-19  7.299465e-18  0.000000e+00 -3.265392e-01  1.0519638  0.0000000 0.000000
                -2.114669e-20  7.843777e-21  4.837763e-19 -1.022672e-18 -4.409549e-19  7.299465e-18  0.000000e+00 -0.3265392  1.0519638 0.000000
                2.702952e-21 -3.540346e-20  7.843777e-21  4.837763e-19 -1.022672e-18 -4.409549e-19  7.299465e-18  0.0000000 -0.3265392 1.051964
            """.strip().split(),
            dtype=float 
        )
        l_inv_R.shape = 10,10 
 
        for i,j in zip( l_inv_R.flat, L_inv.flat):
            self.assertTrue( equivalent(i,j,tol=1E-6) )

    #------------------------------------------------------------------------
    def test6(self):

        V = numpy.array( 
            """
                1.000000e+00 3.104092e-01 9.635387e-02 2.990913e-02 9.284069e-03 2.881860e-03 8.945559e-04 2.776784e-04 8.619393e-05 2.675539e-05 8.305119e-06 2.577985e-06 8.002303e-07 2.483989e-07 7.710529e-08 2.393419e-08
                3.104092e-01 1.000000e+00 3.104092e-01 9.635387e-02 2.990913e-02 9.284069e-03 2.881860e-03 8.945559e-04 2.776784e-04 8.619393e-05 2.675539e-05 8.305119e-06 2.577985e-06 8.002303e-07 2.483989e-07 7.710529e-08
                9.635387e-02 3.104092e-01 1.000000e+00 3.104092e-01 9.635387e-02 2.990913e-02 9.284069e-03 2.881860e-03 8.945559e-04 2.776784e-04 8.619393e-05 2.675539e-05 8.305119e-06 2.577985e-06 8.002303e-07 2.483989e-07
                2.990913e-02 9.635387e-02 3.104092e-01 1.000000e+00 3.104092e-01 9.635387e-02 2.990913e-02 9.284069e-03 2.881860e-03 8.945559e-04 2.776784e-04 8.619393e-05 2.675539e-05 8.305119e-06 2.577985e-06 8.002303e-07
                9.284069e-03 2.990913e-02 9.635387e-02 3.104092e-01 1.000000e+00 3.104092e-01 9.635387e-02 2.990913e-02 9.284069e-03 2.881860e-03 8.945559e-04 2.776784e-04 8.619393e-05 2.675539e-05 8.305119e-06 2.577985e-06
                2.881860e-03 9.284069e-03 2.990913e-02 9.635387e-02 3.104092e-01 1.000000e+00 3.104092e-01 9.635387e-02 2.990913e-02 9.284069e-03 2.881860e-03 8.945559e-04 2.776784e-04 8.619393e-05 2.675539e-05 8.305119e-06
                8.945559e-04 2.881860e-03 9.284069e-03 2.990913e-02 9.635387e-02 3.104092e-01 1.000000e+00 3.104092e-01 9.635387e-02 2.990913e-02 9.284069e-03 2.881860e-03 8.945559e-04 2.776784e-04 8.619393e-05 2.675539e-05
                2.776784e-04 8.945559e-04 2.881860e-03 9.284069e-03 2.990913e-02 9.635387e-02 3.104092e-01 1.000000e+00 3.104092e-01 9.635387e-02 2.990913e-02 9.284069e-03 2.881860e-03 8.945559e-04 2.776784e-04 8.619393e-05
                8.619393e-05 2.776784e-04 8.945559e-04 2.881860e-03 9.284069e-03 2.990913e-02 9.635387e-02 3.104092e-01 1.000000e+00 3.104092e-01 9.635387e-02 2.990913e-02 9.284069e-03 2.881860e-03 8.945559e-04 2.776784e-04
                2.675539e-05 8.619393e-05 2.776784e-04 8.945559e-04 2.881860e-03 9.284069e-03 2.990913e-02 9.635387e-02 3.104092e-01 1.000000e+00 3.104092e-01 9.635387e-02 2.990913e-02 9.284069e-03 2.881860e-03 8.945559e-04
                8.305119e-06 2.675539e-05 8.619393e-05 2.776784e-04 8.945559e-04 2.881860e-03 9.284069e-03 2.990913e-02 9.635387e-02 3.104092e-01 1.000000e+00 3.104092e-01 9.635387e-02 2.990913e-02 9.284069e-03 2.881860e-03
                2.577985e-06 8.305119e-06 2.675539e-05 8.619393e-05 2.776784e-04 8.945559e-04 2.881860e-03 9.284069e-03 2.990913e-02 9.635387e-02 3.104092e-01 1.000000e+00 3.104092e-01 9.635387e-02 2.990913e-02 9.284069e-03
                8.002303e-07 2.577985e-06 8.305119e-06 2.675539e-05 8.619393e-05 2.776784e-04 8.945559e-04 2.881860e-03 9.284069e-03 2.990913e-02 9.635387e-02 3.104092e-01 1.000000e+00 3.104092e-01 9.635387e-02 2.990913e-02
                2.483989e-07 8.002303e-07 2.577985e-06 8.305119e-06 2.675539e-05 8.619393e-05 2.776784e-04 8.945559e-04 2.881860e-03 9.284069e-03 2.990913e-02 9.635387e-02 3.104092e-01 1.000000e+00 3.104092e-01 9.635387e-02
                7.710529e-08 2.483989e-07 8.002303e-07 2.577985e-06 8.305119e-06 2.675539e-05 8.619393e-05 2.776784e-04 8.945559e-04 2.881860e-03 9.284069e-03 2.990913e-02 9.635387e-02 3.104092e-01 1.000000e+00 3.104092e-01
                2.393419e-08 7.710529e-08 2.483989e-07 8.002303e-07 2.577985e-06 8.305119e-06 2.675539e-05 8.619393e-05 2.776784e-04 8.945559e-04 2.881860e-03 9.284069e-03 2.990913e-02 9.635387e-02 3.104092e-01 1.000000e+00            
            """.strip().split(),
            dtype=float
        )
        V.shape = 16,16 
        
        L = chol.cholesky_decomp(V)

        # Check that we recover the original matrix 
        A = numpy.matmul(L,L.T) 
        for i,j in zip( A.flat, V.flat):
            self.assertTrue( equivalent(i,j,tol=1E-8) )

        # Result obtained from R
        l_R = numpy.array( 
            """
                1.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.0000000000 0.0000000000 0.000000000 0.000000000 0.00000000 0.00000000 0.0000000 0.000000
                3.104092e-01 9.506030e-01 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.0000000000 0.0000000000 0.000000000 0.000000000 0.00000000 0.00000000 0.0000000 0.000000
                9.635387e-02 2.950759e-01 9.506030e-01 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.0000000000 0.0000000000 0.000000000 0.000000000 0.00000000 0.00000000 0.0000000 0.000000
                2.990913e-02 9.159428e-02 2.950759e-01 9.506030e-01 0.000000e+00 0.000000e+00 0.000000e+00 0.000000e+00 0.0000000000 0.0000000000 0.000000000 0.000000000 0.00000000 0.00000000 0.0000000 0.000000
                9.284069e-03 2.843171e-02 9.159428e-02 2.950759e-01 9.506030e-01 0.000000e+00 0.000000e+00 0.000000e+00 0.0000000000 0.0000000000 0.000000000 0.000000000 0.00000000 0.00000000 0.0000000 0.000000
                2.881860e-03 8.825464e-03 2.843171e-02 9.159428e-02 2.950759e-01 9.506030e-01 0.000000e+00 0.000000e+00 0.0000000000 0.0000000000 0.000000000 0.000000000 0.00000000 0.00000000 0.0000000 0.000000
                8.945559e-04 2.739505e-03 8.825464e-03 2.843171e-02 9.159428e-02 2.950759e-01 9.506030e-01 0.000000e+00 0.0000000000 0.0000000000 0.000000000 0.000000000 0.00000000 0.00000000 0.0000000 0.000000
                2.776784e-04 8.503676e-04 2.739505e-03 8.825464e-03 2.843171e-02 9.159428e-02 2.950759e-01 9.506030e-01 0.0000000000 0.0000000000 0.000000000 0.000000000 0.00000000 0.00000000 0.0000000 0.000000
                8.619393e-05 2.639619e-04 8.503676e-04 2.739505e-03 8.825464e-03 2.843171e-02 9.159428e-02 2.950759e-01 0.9506030342 0.0000000000 0.000000000 0.000000000 0.00000000 0.00000000 0.0000000 0.000000
                2.675539e-05 8.193621e-05 2.639619e-04 8.503676e-04 2.739505e-03 8.825464e-03 2.843171e-02 9.159428e-02 0.2950759274 0.9506030342 0.000000000 0.000000000 0.00000000 0.00000000 0.0000000 0.000000
                8.305119e-06 2.543375e-05 8.193621e-05 2.639619e-04 8.503676e-04 2.739505e-03 8.825464e-03 2.843171e-02 0.0915942825 0.2950759274 0.950603034 0.000000000 0.00000000 0.00000000 0.0000000 0.000000
                2.577985e-06 7.894871e-06 2.543375e-05 8.193621e-05 2.639619e-04 8.503676e-04 2.739505e-03 8.825464e-03 0.0284317080 0.0915942825 0.295075927 0.950603034 0.00000000 0.00000000 0.0000000 0.000000
                8.002303e-07 2.450641e-06 7.894871e-06 2.543375e-05 8.193621e-05 2.639619e-04 8.503676e-04 2.739505e-03 0.0088254637 0.0284317080 0.091594283 0.295075927 0.95060303 0.00000000 0.0000000 0.000000
                2.483989e-07 7.607014e-07 2.450641e-06 7.894871e-06 2.543375e-05 8.193621e-05 2.639619e-04 8.503676e-04 0.0027395051 0.0088254637 0.028431708 0.091594283 0.29507593 0.95060303 0.0000000 0.000000
                7.710529e-08 2.361287e-07 7.607014e-07 2.450641e-06 7.894871e-06 2.543375e-05 8.193621e-05 2.639619e-04 0.0008503676 0.0027395051 0.008825464 0.028431708 0.09159428 0.29507593 0.9506030 0.000000
                2.393419e-08 7.329652e-08 2.361287e-07 7.607014e-07 2.450641e-06 7.894871e-06 2.543375e-05 8.193621e-05 0.0002639619 0.0008503676 0.002739505 0.008825464 0.02843171 0.09159428 0.2950759 0.950603
            """.strip().split(),
            dtype=float 
        )
        l_R.shape = 16,16

        # Check that we recover the original matrix 
        A = numpy.matmul(l_R,l_R.T) 
        for i,j in zip( A.flat, V.flat):
            self.assertTrue( equivalent(i,j,tol=1E-7) )

        for i,j in zip( l_R.flat, L.flat):
            self.assertTrue( equivalent(i,j,tol=1E-7) )
 
        # Now the inverse
        L_inv = chol.cholesky_inv(L)
 
        # Result obtained from R
        l_inv_R = numpy.array( 
            """
                1.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.0000000  0.0000000 0.000000
                -3.265392e-01  1.051964e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.0000000  0.0000000 0.000000
                1.459893e-17 -3.265392e-01  1.051964e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.0000000  0.0000000 0.000000
                6.417556e-18  0.000000e+00 -3.265392e-01  1.051964e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.0000000  0.0000000 0.000000
                -1.573865e-18  7.299465e-18  0.000000e+00 -3.265392e-01  1.051964e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.0000000  0.0000000 0.000000
                -1.102387e-19 -4.409549e-19  7.299465e-18  0.000000e+00 -3.265392e-01  1.051964e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.0000000  0.0000000 0.000000
                3.146028e-19 -1.022672e-18 -4.409549e-19  7.299465e-18  0.000000e+00 -3.265392e-01  1.051964e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.0000000  0.0000000 0.000000
                -2.755968e-20  4.837763e-19 -1.022672e-18 -4.409549e-19  7.299465e-18  0.000000e+00 -3.265392e-01  1.051964e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.0000000  0.0000000 0.000000
                -2.114669e-20  7.843777e-21  4.837763e-19 -1.022672e-18 -4.409549e-19  7.299465e-18  0.000000e+00 -3.265392e-01  1.051964e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.0000000  0.0000000 0.000000
                2.702952e-21 -3.540346e-20  7.843777e-21  4.837763e-19 -1.022672e-18 -4.409549e-19  7.299465e-18  0.000000e+00 -3.265392e-01  1.051964e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.0000000  0.0000000 0.000000
                1.351476e-21  3.564192e-21 -3.540346e-20  7.843777e-21  4.837763e-19 -1.022672e-18 -4.409549e-19  7.299465e-18  0.000000e+00 -3.265392e-01  1.051964e+00  0.000000e+00  0.000000e+00  0.0000000  0.0000000 0.000000
                -2.153100e-22 -1.106358e-21  7.128384e-21 -3.540346e-20  7.843777e-21  4.837763e-19 -1.022672e-18 -4.409549e-19  7.299465e-18  0.000000e+00 -3.265392e-01  1.051964e+00  0.000000e+00  0.0000000  0.0000000 0.000000
                -5.382750e-23  8.910480e-22 -2.212716e-21  7.128384e-21 -3.540346e-20  7.843777e-21  4.837763e-19 -1.022672e-18 -4.409549e-19  7.299465e-18  0.000000e+00 -3.265392e-01  1.051964e+00  0.0000000  0.0000000 0.000000
                -1.345687e-23 -1.652085e-22  8.910480e-22 -2.212716e-21  7.128384e-21 -3.540346e-20  7.843777e-21  4.837763e-19 -1.022672e-18 -4.409549e-19  7.299465e-18  0.000000e+00 -3.265392e-01  1.0519638  0.0000000 0.000000
                -3.364219e-24  2.111681e-23 -1.652085e-22  8.910480e-22 -2.212716e-21  7.128384e-21 -3.540346e-20  7.843777e-21  4.837763e-19 -1.022672e-18 -4.409549e-19  7.299465e-18  0.000000e+00 -0.3265392  1.0519638 0.000000
                6.120258e-24 -3.364219e-24  2.111681e-23 -1.652085e-22  8.910480e-22 -2.212716e-21  7.128384e-21 -3.540346e-20  7.843777e-21  4.837763e-19 -1.022672e-18 -4.409549e-19  7.299465e-18  0.0000000 -0.3265392 1.051964                
            """.strip().split(),
            dtype=float 
        )
        l_inv_R.shape = 16,16
 
        for i,j in zip( l_inv_R.flat, L_inv.flat):
            self.assertTrue( equivalent(i,j,tol=1E-6) ) 
#-----------------------------------------------------
class TestCholeskyComplex(unittest.TestCase):
    """
    Decomposition of a complex matrix 
        
    """
    def test(self):
        
        data = [[1,-2j],[2j,5]]
        
        na = numpy.array( data )
        a = numpy.array( data )

        Ln = numpy.linalg.cholesky(na)
        L = chol.cholesky_decomp(a)

        for i,j in zip( Ln.flat, L.flat):
            self.assertTrue( equivalent_complex(i,j) )

        N,N = L.shape
        A = numpy.zeros( (N,N), dtype=L.dtype )
        for i in range(N):
            for j in range(N):
                A[i,j] = sum( 
                    L[i,k] * L.T[k,j].conjugate()
                        for k in range(N)
                )
                        
        for i,j in zip( A.flat, a.flat):
            self.assertTrue( equivalent_complex(i,j) )

        
#=====================================================
if(__name__== '__main__'):

    unittest.main()    # Runs all test methods starting with 'test'